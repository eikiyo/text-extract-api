# docker-compose.vast.yml - Optimized for Vast.ai deployment

version: '3.8'

services:
  fastapi_app:
    build:
      context: .
      dockerfile: dev.gpu.Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - APP_TYPE=fastapi
      - APP_ENV=production
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OLLAMA_HOST=http://ollama:11434
      - STORAGE_PROFILE_PATH=/app/storage_profiles
      - REDIS_CACHE_URL=redis://redis:6379/1
      # Vast.ai optimizations
      - CUDA_VISIBLE_DEVICES=all
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    depends_on:
      - redis
      - ollama
    volumes:
      - ./storage:/app/storage
      - ./storage_profiles:/app/storage_profiles
      - vast_storage:/vast-storage
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  celery_worker:
    build:
      context: .
      dockerfile: dev.gpu.Dockerfile
    restart: unless-stopped
    environment:
      - APP_TYPE=celery
      - APP_ENV=production
      - OLLAMA_HOST=http://ollama:11434
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - STORAGE_PROFILE_PATH=/app/storage_profiles
      # Worker optimizations
      - CELERY_WORKER_CONCURRENCY=2
      - CELERY_WORKER_PREFETCH_MULTIPLIER=1
      - CUDA_VISIBLE_DEVICES=all
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    depends_on:
      - redis
      - fastapi_app
      - ollama
    volumes:
      - ./storage:/app/storage
      - ./storage_profiles:/app/storage_profiles
      - vast_storage:/vast-storage
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
      replicas: 2  # Start with 2 workers, scale as needed

  redis:
    image: redis:7.2.4-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    ports:
      - "11434:11434"
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - OLLAMA_MODELS=/root/.ollama/models
      # Performance optimizations
      - OLLAMA_NUM_PARALLEL=2
      - OLLAMA_MAX_LOADED_MODELS=3
      - OLLAMA_GPU_MEMORY_FRACTION=0.8
    volumes:
      - ollama_models:/root/.ollama
      - vast_storage:/vast-storage
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Monitoring with Prometheus + Grafana
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    profiles:
      - monitoring

  # Optional: File browser for storage management
  filebrowser:
    image: filebrowser/filebrowser:latest
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./storage:/srv/storage
      - vast_storage:/srv/vast-storage
    environment:
      - FB_BASEURL=/files
    profiles:
      - management

volumes:
  redis_data:
    driver: local
  ollama_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  vast_storage:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
